import { doc, getDoc } from 'firebase/firestore';
import { db, COLLECTIONS } from '@/infrastructure/firebase/config';
import { CONFIG } from './config';

/**
 * Funci√≥n de utilidad para verificar que un usuario tiene cr√©ditos asignados
 * @param userId - ID del usuario
 * @returns Informaci√≥n de cr√©ditos del usuario
 */
export async function validateUserCredits(userId: string) {
  try {
    const creditsDoc = await getDoc(doc(db, COLLECTIONS.USER_CREDITS, userId));
    
    if (!creditsDoc.exists()) {
      console.warn('‚ö†Ô∏è No se encontraron cr√©ditos para el usuario:', userId);
      return null;
    }

    const creditsData = creditsDoc.data();
    console.log('‚úÖ Cr√©ditos del usuario:', {
      balance: creditsData.balance,
      totalEarned: creditsData.totalEarned,
      transactionCount: creditsData.transactions?.length || 0
    });

    // Validar que el balance inicial sea correcto
    if (creditsData.balance !== CONFIG.CREDITS.SIGNUP_BONUS) {
      console.warn('‚ö†Ô∏è El balance no coincide con la bonificaci√≥n de registro:', {
        expected: CONFIG.CREDITS.SIGNUP_BONUS,
        actual: creditsData.balance
      });
    }

    return creditsData;
  } catch (error) {
    console.error('‚ùå Error validando cr√©ditos:', error);
    return null;
  }
}

/**
 * Funci√≥n para verificar todos los usuarios y sus cr√©ditos
 * Solo para debugging en desarrollo
 */
export async function validateAllUsersCredits() {
  if (process.env.NODE_ENV !== 'development') {
    console.warn('‚ö†Ô∏è Esta funci√≥n solo est√° disponible en desarrollo');
    return;
  }

  try {
    // Esta funci√≥n requerir√≠a una consulta m√°s compleja
    // Por ahora solo imprime la configuraci√≥n actual
    console.log('üìä Configuraci√≥n de cr√©ditos:', {
      signupBonus: CONFIG.CREDITS.SIGNUP_BONUS,
      collections: COLLECTIONS.USER_CREDITS
    });
  } catch (error) {
    console.error('‚ùå Error en validaci√≥n:', error);
  }
}