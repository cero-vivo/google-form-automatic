import OpenAI from 'openai';
import { z } from 'zod';
import { CreditsService } from '../firebase/credits-service';
import { GoogleFormsService } from '@/infrastructure/firebase/GoogleFormsService';
import { FirebaseRepository } from '@/infrastructure/firebase/FirebaseRepository';

const questionSchema = z.object({
  type: z.enum([
    'texto_corto', 'texto_largo', 'opcion_multiple', 'checkboxes',
    'dropdown', 'escala_lineal', 'fecha', 'hora', 'email', 'numero',
    'archivo', 'grid', 'escala', 'fecha_hora'
  ]),
  label: z.string().min(1),
  options: z.array(z.string()).optional(),
  range: z.tuple([z.number(), z.number()]).optional()
});

const formSchema = z.object({
  title: z.string().min(1),
  questions: z.array(questionSchema)
});

export class OpenAIFormService {
  private openai: OpenAI;

  constructor() {
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      console.error('‚ùå OPENAI_API_KEY no est√° configurada. Por favor, configura la variable de entorno.');
    }
    this.openai = new OpenAI({
      apiKey: apiKey,
      dangerouslyAllowBrowser: true
    });
  }

  async processChatMessage(userId: string, message: string, conversation: any[]): Promise<{
    response: string;
    formPreview?: any;
    creditsUsed: number;
    totalMessages: number;
  }> {
    try {
      // Verificar cr√©ditos disponibles
      const userCredits = await CreditsService.getUserCredits(userId);
      if (!userCredits || userCredits.balance < 1) {
        throw new Error('Cr√©ditos insuficientes para continuar');
      }

      // Leer contexto del agente
      const agentContext = await this.getAgentContext();
      
      // Construir mensajes para OpenAI
      const messages = [
        { role: 'system', content: agentContext },
        ...conversation.map(msg => ({ role: msg.role, content: msg.content })),
        { role: 'user', content: message }
      ];

      // Usar el mensaje del usuario directamente sin interpretaci√≥n forzada
      const interpretedMessage = message;

      // Actualizar el √∫ltimo mensaje del usuario con el mensaje interpretado
      messages[messages.length - 1] = { role: 'user', content: interpretedMessage };

      const prompt = `Crea un formulario de Google Forms basado en esta solicitud: "${interpretedMessage}".

        RESPONDE √öNICAMENTE con este formato JSON:
        
        {
          "title": "T√≠tulo del formulario",
          "description": "Descripci√≥n breve",
          "questions": [
            {
              "type": "tipo_de_pregunta",
              "title": "Texto de la pregunta",
              "description": "Instrucci√≥n adicional (opcional)",
              "required": true/false,
              "options": ["opci√≥n1", "opci√≥n2"] // para opcion_multiple, checkboxes, dropdown
            }
          ]
        }

        TIPOS DE PREGUNTAS: texto_corto, texto_largo, opcion_multiple, checkboxes, dropdown, escala_lineal, fecha, hora, email, numero, archivo`

      const enhancedMessages = [...messages];
      enhancedMessages[enhancedMessages.length - 1] = {
        role: 'user',
        content: prompt
      };

      const response = await this.openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: enhancedMessages,
        temperature: 1,
        max_completion_tokens: 1000
      });

      
      const aiResponse = response.choices[0]?.message?.content || '';
      console.log('Respuesta raw de OpenAI:', aiResponse);
      
      // Intentar parsear JSON del response
      let formPreview = null;
      try {
        const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const formData = JSON.parse(jsonMatch[0]);
          const validatedForm = formSchema.parse(formData);
          formPreview = validatedForm;
        } else {
          // If no JSON found, create a basic form structure from the AI's text response
          console.log('No se encontr√≥ JSON v√°lido, creando estructura b√°sica');
          formPreview = {
            title: `Formulario generado`,
            description: `Formulario basado en tu solicitud: ${message}`,
            questions: [
              {
                type: 'texto_largo',
                label: 'Cu√©ntanos m√°s sobre tu solicitud',
                required: true
              }
            ]
          };
        }
      } catch (error) {
        console.log('Error parsing JSON, creando estructura b√°sica');
        formPreview = {
          title: `Formulario generado`,
          description: `Formulario basado en: ${message}`,
          questions: [
            {
              type: 'texto_largo',
              label: 'Respuesta principal',
              required: true
            }
          ]
        };
      }

      // Actualizar contador de mensajes y cr√©ditos
      const totalMessages = conversation.length + 1;
      const creditsUsed = Math.floor(totalMessages / 5);

      if (creditsUsed > 0) {
        await CreditsService.consumeCredits(userId, {
          amount: creditsUsed,
          formTitle: 'Chat con IA'
        });
        await FirebaseRepository.logChatInteraction(userId, {
          userId,
          messages: totalMessages,
          creditsUsed: creditsUsed,
          timestamp: new Date()
        });
      }

      return {
        response: aiResponse,
        formPreview,
        creditsUsed,
        totalMessages
      };
    } catch (error: any) {
      console.error('Error en OpenAIFormService:', error);
      
      if (error?.status === 404) {
        throw new Error('Modelo de IA no disponible. Por favor, contacta al soporte.');
      } else if (error?.status === 401) {
        throw new Error('‚ùå Error de autenticaci√≥n: La clave API de OpenAI no est√° configurada o es inv√°lida. Por favor, configura OPENAI_API_KEY en tu archivo .env.local');
      } else if (error?.status === 429) {
        throw new Error('Demasiadas solicitudes. Por favor, espera un momento y vuelve a intentarlo.');
      } else if (error?.code === 'invalid_api_key') {
        throw new Error('‚ùå La clave API de OpenAI no est√° configurada. Crea un archivo .env.local con: OPENAI_API_KEY=sk-tu-clave-aqui');
      } else if (error?.message?.includes('API key')) {
        throw new Error('‚ùå Configura tu clave API de OpenAI. Crea .env.local con OPENAI_API_KEY=sk-tu-clave-aqui');
      } else if (error?.message?.includes('JSON')) {
        throw new Error('üí° Para mejores resultados, s√© m√°s espec√≠fico. Ejemplo: "Crear formulario de feedback para usuarios que compraron [producto espec√≠fico] en los √∫ltimos 30 d√≠as"');
      } else {
        throw new Error(`üí° Estructura tu mensaje as√≠: "Crear [tipo de formulario] para [p√∫blico objetivo] sobre [tema espec√≠fico]". Ejemplo: "Crear formulario de feedback de producto para clientes que usaron nuestra app m√≥vil"`);
      }
    }
  }

  async publishFormFromChat(userId: string, formData: any): Promise<{
    formId: string;
    googleFormUrl: string;
    creditsUsed: number;
  }> {
    try {
      // Verificar cr√©ditos para publicaci√≥n
      const userCredits = await CreditsService.getUserCredits(userId);
      if (!userCredits || userCredits.balance < 2) {
        throw new Error('Cr√©ditos insuficientes para publicar el formulario');
      }

      // Crear formulario en Google Forms
      const validatedForm = formSchema.parse(formData);
      const googleFormId = await GoogleFormsService.createForm(validatedForm);
        
        // Consumir cr√©ditos
        await CreditsService.consumeCredits(userId, {
          amount: 2,
          formTitle: validatedForm.title || 'Formulario sin t√≠tulo'
        });

        // Guardar en Firebase
        await FirebaseRepository.saveForm(userId, {
          title: validatedForm.title,
          questions: validatedForm.questions,
          googleFormId: googleFormId,
          googleFormUrl: `https://forms.google.com/${googleFormId}`,
          createdVia: 'ai-chat',
          creditsUsed: 2,
          timestamp: new Date(),
          userId
        });

      return {
        formId: googleFormId,
        googleFormUrl: `https://forms.google.com/${googleFormId}`,
        creditsUsed: 2
      };
    } catch (error) {
      console.error('Error al publicar formulario:', error);
      throw error;
    }
  }

  private async getAgentContext(): Promise<string> {
    return JSON.stringify({
      specialization: "Creaci√≥n de formularios de Google Forms para encuestas y evaluaciones",
      supported_question_types: [
        "texto_corto", "texto_largo", "opcion_multiple", "checkboxes",
        "dropdown", "escala_lineal", "fecha", "hora", "email", "numero",
        "archivo", "grid", "escala", "fecha_hora"
      ],
      examples: {
        product_feedback: {
          title: "Formulario de Feedback de Producto",
          description: "Recopilar opiniones sobre un producto espec√≠fico",
          questions: [
            "¬øQu√© producto has utilizado?",
            "¬øCu√°l es tu nivel de satisfacci√≥n? (1-10)",
            "¬øQu√© caracter√≠sticas te gustaron m√°s?",
            "¬øQu√© mejorar√≠as?",
            "¬øRecomendar√≠as este producto? (S√≠/No/Quiz√°s)"
          ]
        },
        customer_satisfaction: {
          title: "Encuesta de Satisfacci√≥n del Cliente",
          description: "Medir la satisfacci√≥n general del cliente",
          questions: [
            "¬øC√≥mo calificar√≠as nuestro servicio?",
            "¬øQu√© tan probable es que nos recomiendes? (0-10)",
            "¬øQu√© podemos mejorar?"
          ]
        },
        argentine_movies: {
          title: "Encuesta de Pel√≠culas Argentinas",
          description: "Calificar y evaluar las mejores pel√≠culas del cine argentino",
          questions: [
            "Califica 'El secreto de sus ojos' (1-10)",
            "Califica 'Relatos salvajes' (1-10)",
            "Califica 'Nueve reinas' (1-10)",
            "Califica 'El hijo de la novia' (1-10)",
            "Califica 'Kamchatka' (1-10)",
            "¬øCu√°l es tu pel√≠cula argentina favorita?",
            "¬øPor qu√© es tu favorita?",
            "¬øQu√© g√©nero de cine argentino prefieres? (Drama/Comedia/Suspenso/Documental)",
            "¬øQu√© √©poca del cine argentino te gusta m√°s? (Cl√°sica 1930-1980/Moderna 1980-2000/Contempor√°nea 2000+)",
            "¬øRecomendar√≠as cine argentino a otros? (S√≠/No/Quiz√°s)"
          ]
        }
      },
      message_structure: {
        required: ["tipo de formulario", "objetivo", "audiencia"],
        good_examples: [
          "Crear formulario de feedback para clientes que compraron nuestro software en los √∫ltimos 30 d√≠as",
          "Generar encuesta de satisfacci√≥n para usuarios de nuestra app m√≥vil, enfocada en la experiencia de usuario",
          "Formulario de evaluaci√≥n de producto para testers de nuestra nueva funcionalidad de pago"
        ],
        bad_examples: [
          "-",
          "-",
          "-"
        ]
      },
      intelligent_interpretation: {
        description: "Traducci√≥n autom√°tica de lenguaje natural a solicitudes estructuradas",
        examples: [
          {
            user_input: "quiero un formulario de feedback",
            interpreted_as: "Crear formulario de feedback de producto para clientes actuales sobre su experiencia de uso, incluyendo satisfacci√≥n general, caracter√≠sticas m√°s valiosas, problemas encontrados y sugerencias de mejora"
          },
          {
            user_input: "encuesta para mi equipo",
            interpreted_as: "Crear formulario de evaluaci√≥n de clima laboral para el equipo de trabajo actual, incluyendo satisfacci√≥n con el ambiente, comunicaci√≥n, liderazgo y oportunidades de crecimiento"
          },
          {
            user_input: "formulario de registro",
            interpreted_as: "Crear formulario de registro de nuevos usuarios para capturar informaci√≥n b√°sica incluyendo nombre, email, tel√©fono, empresa y motivo de inter√©s"
          }
        ],
        rules: [
          "Identifica autom√°ticamente: [tipo de formulario] + [p√∫blico objetivo impl√≠cito] + [contexto espec√≠fico]",
          "Agrega detalles est√°ndar relevantes seg√∫n el tipo de formulario",
          "Usa lenguaje claro y espec√≠fico",
          "No requieras que el usuario siga un formato espec√≠fico",
          "Si el mensaje es muy ambiguo, crea el formulario m√°s com√∫n y √∫til para ese contexto"
        ]
      },
      credit_rules: {
        chat: "Cada 5 mensajes = 1 cr√©dito",
        publish: "2 cr√©ditos para publicar v√≠a IA"
      },
      output_format: {
        type: "json",
        structure: {
          title: "string - t√≠tulo espec√≠fico del formulario",
          questions: [{
            type: "string - tipo de pregunta v√°lido",
            label: "string - pregunta clara y espec√≠fica",
            options: ["string array - solo si aplica"],
            range: ["number min", "number max"]
          }]
        }
      },
      instructions: "Para mensajes simples como 'Formulario de feedback de producto', expande autom√°ticamente incluyendo: 1) Producto espec√≠fico, 2) P√∫blico objetivo, 3) Objetivo de la encuesta, 4) Preguntas clave est√°ndar. Para encuestas de pel√≠culas argentinas con puntuaci√≥n: DEBES crear t√≠tulo 'Encuesta de Pel√≠culas Argentinas - Sistema de Calificaci√≥n', incluir estas pel√≠culas espec√≠ficas: 'El secreto de sus ojos', 'Relatos salvajes', 'Nueve reinas', 'El hijo de la novia', 'Kamchatka', 'Tesis sobre un homicidio', 'El clan', 'Wild Tales', 'The Official Story', 'Nine Queens', cada una con pregunta tipo 'escala_lineal' y rango 1-10, agregar preguntas sobre g√©nero favorito, √©poca preferida, pel√≠cula favorita no listada y razones de preferencia.",
      restrictions: "Si el mensaje es muy gen√©rico, asume un formulario est√°ndar pero espec√≠fico en lugar de pedir m√°s detalles"
    }, null, 2);
  }
}